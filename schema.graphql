type System @entity {
  id: ID!
  rateOracleList: [String!]!
  coverAdjusterOracleList: [String!]!
  externalProductList: [String!]!
  syncOracleList: [String!]!
  governanceFee: BigInt!
  operator: Bytes!
  allowanceManager: Bytes!
  treasury: Bytes!
  defaultPayoutRequester: Bytes!
  defaultPayoutApprover: Bytes!
  productCreatorsAllowlistId: BigInt!
  maxProductOperatorIncentiveFee: BigInt!
  maxMarketOperatorIncentiveFee: BigInt!
  policyTokenIssuer: Bytes!
  policyTokenPermissionIssuer: Bytes!
  liquidationGasUsage: BigInt!
  liquidationIncentive: BigInt!
  solvencyMultiplier: BigInt!
  minPolicyDepositMultiplier: BigInt!
  maxRiskPoolManagerFee: BigInt!
  extPoolDetailsConfidenceInterval: BigInt!
  bridgeConnector: Bytes!
  swapCycleDuration: BigInt!
  swapDuration: BigInt!
  idleDuration: BigInt!
  maxIterations: BigInt!
  executionDelay: BigInt!

  status: Int!
}

type PolicyPermissionToken @entity {
  id: ID!
  policyId: BigInt
  owner: Bytes
  policy: Policy
}

type DelayedExecution @entity {
  # sig-data
  id: ID!
  sig: Bytes!
  data: Bytes!
  requestedBy: Bytes!
  requestedAt: BigInt!
}

type DelayedExecutionHistory @entity {
  id: ID!
  sig: Bytes!
  data: Bytes!
  requestedBy: Bytes!
  requestedAt: BigInt!
  executedAt: BigInt!
  executedBy: Bytes!
  isDeclined: Boolean!
}

type Product @entity {
  id: ID!
  productId: BigInt!
  riskPoolsControllerAddress: Bytes!
  policyTokenIssuerAddress: Bytes!
  treasuryAddress: Bytes!
  payoutRequester: Bytes
  payoutApprover: Bytes
  productIncentiveFee: BigInt
  feeRecipient: Bytes!
  maxMarketIncentiveFee: BigInt
  title: String
  wording: String
  details: String
  data: String
  settlementType: Int!
  cashSettlementIsEnabled: Boolean
  physicalSettlementIsEnabled: Boolean
  feeToken: Bytes
  marketCreationFeeAmount: BigInt
  defaultPremiumToken: Bytes
  defaultCapitalToken: Bytes
  defaultCoverAdjusterOracle: Bytes
  claimProcessor: Bytes
  defaultRatesOracle: Bytes
  withdrawalDelay: BigInt
  withdrawRequestExpiration: BigInt
  marketCreatorsAllowlistId: BigInt
  waitingPeriod: BigInt
  operator: Bytes!
  createdAt: BigInt!
  createdBy: Bytes!
  updatedAt: BigInt!
  markets: [Market!] @derivedFrom(field: "product")
  status: Int!
}

type Market @entity {
  """
  riskPoolController-marketId
  """
  id: ID!
  marketId: BigInt!
  product: Product!
  productId: BigInt!
  riskPoolsControllerAddress: Bytes!
  entityList: [String!]
  isEnabled: Boolean!
  createdAt: BigInt!
  title: String!
  details: String!
  wording: String
  data: String
  author: Bytes!
  marketFeeRecipient: Bytes!
  premiumToken: Bytes!
  capitalToken: Bytes!
  insuredToken: Bytes!

  bids: [Bid!]! @derivedFrom(field: "market")
  aggregatedPools: [AggregatedPool!]! @derivedFrom(field: "market")

  latestAccruedTimestamp: BigInt!
  coverAdjusterOracle: Bytes!
  rateOracle: Bytes!
  waitingPeriod: BigInt!
  marketOperatorIncentiveFee: BigInt!
  policyBuyerAllowListId: BigInt!
  policyBuyerAllowanceListId: BigInt!
  status: Int!
  premiumMulAccumulator: BigInt!
  settlementDiscount: BigInt!

  desiredCover: BigInt!
  withdrawDelay: BigInt!
  headAggregatedPoolId: BigInt!
  tailCover: BigInt!
  minPremiumRatePerSec: BigInt!
  maxPremiumRatePerSec: BigInt!
  bidStepPremiumRatePerSec: BigInt!
  maxAggregatedPoolSlots: BigInt!
  tailKink: BigInt!
  tailJumpPremiumRatePerSec: BigInt!
  tailAggPoolId: BigInt

  payoutRequester: Bytes!
  payoutApprover: Bytes!

  rewards: [CoverMiningReward!]! @derivedFrom(field: "market")
}

type LoanRequest @entity {
  id: ID!
  policyId: BigInt!
  amount: BigInt!
  status: Int!
}

type Loan @entity {
  id: ID!
  loanRequestId: BigInt!
  policyId: BigInt!
  borrowedAmount: BigInt!
  requiredRepayAmount: BigInt!
  lastUpdateTs: BigInt!
  governanceIncentiveFee: BigInt!
  productOperatorIncentiveFee: BigInt!
  marketOperatorIncentiveFee: BigInt!
  data: String
}

type LoanChunk @entity {
  """ loanId-chunkIndex """
  id: ID!
  loanId: BigInt!
  chunkIndex: Int!
  poolId: Bytes!
  rate: BigInt!
  borrowedAmount: BigInt!
  repaidAmount: BigInt!
}

type AggregatedPool @entity {
  id: ID!
  market: Market!
  poolList: [String!]!
  rate: BigInt!
  totalCapacity: BigInt!
  premiumAccumulator: BigInt!
  premiumBalance: BigInt!
  nextAggregatedPoolId: BigInt!
  prevAggregatedPoolId: BigInt!
}

type CoverMiningReward @entity {
  id: ID!
  market: Market!
  amount: BigInt!
  creator: Bytes!
  rewardToken: Bytes!
  startedAt: BigInt!
  endedAt: BigInt!
  ratePerSecond: BigInt!
  updatedAt: BigInt!
  rewardPerToken: BigInt!
  isArchived: Boolean!
  cid: String
  rootHash: Bytes
  dataUrl: String
}

type CoverMiningRewardClaim @entity {
  id: ID!
  rewardId: BigInt!
  policyId: BigInt!
  account: Bytes!
  amount: BigInt!
  updatedAt: BigInt!
}

type AccruedFee @entity {
  """
  recipientAddress-tokenAddress
  """
  id: ID!
  recipientAddress: Bytes!
  tokenAddress: Bytes!
  balance: BigInt!
  claimedBalance: BigInt!
}

type MarketAccruedFee @entity {
  """
  recipientAddress-tokenAddress-marketId
  """
  id: ID!
  marketId: String!
  recipientAddress: Bytes!
  tokenAddress: Bytes!
  balance: BigInt!
  claimedBalance: BigInt!
  claimedIndicator: BigInt!
}

type FrontendOperator @entity {
  id: ID!
  feeRecipient: Bytes
  frontendOperatorFee: BigInt
  referralFee: BigInt
  policyBuyerReferralBonus: BigInt
  meta: String
  isActive: Boolean
}

type Policy @entity {
  """
  policyTokenIssuer-policyId
  """
  id: ID!
  policyTokenIssuerAddress: Bytes!
  policyId: BigInt!
  product: Product!
  productId: BigInt!
  market: Market!
  marketId: BigInt
  owner: String!
  issuer: String!
  coverage: BigInt!
  coverageChanged: BigInt
  underlyingCover: BigInt
  validFrom: BigInt
  validUntil: BigInt!
  originalBalance: BigInt!
  balance: BigInt!
  totalCharged: BigInt!
  expired: Boolean
  waitingPeriod: BigInt
  claims: [Claim!] @derivedFrom(field: "policy")
  frontendOperator: FrontendOperator
  updatedAt: BigInt
  liquidatedAt: BigInt
  liquidatedBy: String

  initialMarketPremiumMulAccumulator: BigInt

  premiumDeposit: BigInt!
  foAddress: Bytes!
  foFeeRate: BigInt!
  referralBonus: BigInt!
  foFeeDeposit: BigInt!
  referralAddress: Bytes!
  referralFeeRate: BigInt!
  referralFeeDeposit: BigInt!
  permissionTokens: [PolicyPermissionToken!] @derivedFrom(field: "policy")
}

type Pool @entity {
  id: ID!
  capitalTokenAddress: Bytes!
  nominatedTokenAddress: Bytes
  name: String
  riskPoolsControllerAddress: Bytes!
  capitalTokenBalance: BigInt!
  poolTokenBalance: BigInt!
  participants: BigInt!
  createdAt: BigInt
  createdBy: Bytes!
  poolTokenDecimals: Int
  poolTokenSymbol: String
  capitalTokenDecimals: Int
  capitalTokenSymbol: String
  markets: [Market!]!
  updatedAt: BigInt
  withdrawDelay: BigInt
  withdrawRequestExpiration: BigInt
  capitalRequirement: BigInt
  lpAllowListId: BigInt
  lpAllowanceListId: BigInt
  rewards: [Reward!]!
  premiums: [PoolPremium!] @derivedFrom(field: "pool")
  settlements: [PoolSettlement!] @derivedFrom(field: "pool")
  fees: [PoolFee!] @derivedFrom(field: "pool")
  marketFees: [MarketPoolFee!] @derivedFrom(field: "pool")
  bids: [Bid!] @derivedFrom(field: "pool")
  externalPoolList: [String!]!
  externalWalletList: [ExternalWallet!] @derivedFrom(field: "pool")
  externalCapacity: BigInt
  externalStatLastUpdated: BigInt
  totalTransferredOut: BigInt
  premiumRootHash: String
  premiumRootHashLastUpdated: BigInt
  premiumDataUrl: String
  settlementRootHash: String
  settlementRootHashLastUpdated: BigInt
  settlementDataUrl: String
  physicalSettlementMarketCount: Int
  manager: Bytes!
  managerFee: BigInt!
  feeRecipient: Bytes!
  agreement: String!
  released: BigInt!
  withdrawProcedure: Int!
  reserveRatio: BigInt!
}

type FeeRecipientPool @entity {
  """
  id is feeRecipientAddress
  """
  id: ID!
  poolList: [String!]!
}

type ExternalWallet @entity {
  """
  poolId-extChainId-extPoolId
  """
  id: ID!
  pool: Pool!
  externalChainId: BigInt
  externalPoolId: Bytes
  reserveWallet: Bytes
  refundWallet: Bytes
  externalReserveWallet: Bytes
  externalRefundWallet: Bytes
  transferredTo: BigInt
  isActive: Boolean
}

type PoolPremium @entity {
  """
  poolId-tokenId
  """
  id: ID!
  poolId: Bytes!
  tokenId: Bytes!
  amount: BigInt!
  pool: Pool!
}

type PoolSettlement @entity {
  """
  poolId-tokenId
  """
  id: ID!
  poolId: Bytes!
  tokenId: Bytes!
  amount: BigInt!
  pool: Pool!
}

type PoolFee @entity {
  """
  poolId-tokenId
  """
  id: ID!
  poolId: Bytes!
  tokenId: Bytes!
  amount: BigInt!
  claimedAmount: BigInt!
  pool: Pool!
}

type MarketPoolFee @entity {
  """
  poolId-tokenId-marketId
  """
  id: ID!
  poolId: Bytes!
  marketId: BigInt!
  tokenId: Bytes!
  amount: BigInt!
  claimedAmount: BigInt!
  claimedIndicator: BigInt!
  pool: Pool!
}

type UserFee @entity {
  """
  tokenId-userId-type
  """
  id: ID!
  tokenId: Bytes!
  userId: Bytes!
  type: String!
  amount: BigInt!
  claimedAmount: BigInt!
}

type MarketUserFee @entity {
  """
  tokenId-userId-type-marketId
  """
  id: ID!
  tokenId: Bytes!
  userId: Bytes!
  type: String!
  marketId: BigInt!
  amount: BigInt!
  claimedAmount: BigInt!
  claimedIndicator: BigInt!
}

type Reward @entity {
  id: ID!
  num: BigInt!
  poolId: String!
  amount: BigInt!
  creator: Bytes!
  rewardToken: Bytes!
  rewardTokenDecimals: Int
  rewardTokenSymbol: String
  rewardTokenName: String
  startedAt: BigInt
  endedAt: BigInt
  ratePerSecond: BigInt
  updatedAt: BigInt
  rewardPerToken: BigInt
  cid: String
}

type PoolParticipant @entity {
  id: ID!
  user: String!
  poolId: String
  tokenBalance: BigInt!
}

type State @entity {
  id: ID!
  type: String!
  market: String
  key: String
  value: BigInt!
  stringValue: String
}

type Event @entity {
  id: ID!
  type: String!
  market: String
  key: String
  value1: String
  value2: String
  value3: String
  value4: String
  value5: String
  timestamp: BigInt

  from: String
  transaction: Bytes
  blockNumber: BigInt
  gasLimit: BigInt
  gasPrice: BigInt
}

type WithdrawRequest @entity {
  id: ID!
  num: BigInt!
  poolId: Bytes!
  userId: Bytes!
  status: Int
  amount: BigInt
  delayedAt: BigInt
}

type Claim @entity {
  id: ID!
  policyId: BigInt!
  votingId: BigInt
  policy: Policy!
  product: Product!
  submittedBy: Bytes!
  submittedAt: BigInt!
  status: Int
  details: String
}

type RateOracle @entity {
  id: ID!
  pairList: [String!]!
  avgGasPrice: BigInt
}

type RateOraclePairRate @entity {
  """
  rateOracle-from-to
  """
  id: ID!
  oracle: String!
  from: String!
  to: String!
  value: BigInt
  updatedAt: BigInt
}

type AdjustmentConfiguration @entity {
  """
  coverAdjuster-configId
  """
  id: ID!
  configId: BigInt!
  coverAdjuster: Bytes!
  productId: BigInt!
  product: Product
  policyId: BigInt!
  policy: Policy
  tokenId: BigInt
  maxCoverage: BigInt
  maxRate: BigInt
  lastAdjustmentAt: BigInt
  adjustmentFrequency: BigInt
}

type PremiumRateModel @entity {
  id: ID!
  type: Int
  rate0: BigDecimal
  util1: BigDecimal
  rate1: BigDecimal
  rate2: BigDecimal
}

type Swap @entity {
  id: ID!
  policyId: BigInt!
  recipient: Bytes!
  insuredToken: Bytes!
  capitalToken: Bytes!
  swapAmount: BigInt!
  swapCover: BigInt!
  transaction: Bytes!
  createdAt: BigInt!
  market: Market!
}

type SwapDetail @entity {
  id: ID!
  recipient: Bytes!
  riskPool: Bytes!
  insuredToken: Bytes!
  insuredTokenSwappedAmount: BigInt!
  assetToken: Bytes!
  assetTokenSwappedAmount: BigInt!
  createdAt: BigInt!
  transaction: Bytes!
}

type Payout @entity {
  id: ID!
  marketId: BigInt
  market: Market!
  recipient: Bytes
  capitalToken: Bytes
  amount: BigInt
}

type PayoutRequest @entity {
  id: ID!
  marketId: BigInt!
  market: Market!
  policyId: BigInt
  recipient: Bytes
  distributor: Boolean
  baseAsset: Bytes
  requestedAmount: BigInt
  status: Int
  rootHash: String
  data: String
  externalRecipientList: [String!]!
}

type OutgoingPayoutRequest @entity {
  """
  payoutRequestId-chainId-poolId
  """
  id: ID!
  poolId: Bytes
  payoutRequestId: BigInt
  targetChainId: BigInt
  targetPoolId: Bytes
  payoutRequest: PayoutRequest
  amount: BigInt
  recipient: Bytes
  createdAt: BigInt
}

type OutgoingLoss @entity {
  """
  createdAt-chainId-poolId
  """
  id: ID!
  poolId: Bytes
  targetChainId: BigInt
  targetPoolId: Bytes
  amount: BigInt
  createdAt: BigInt
}

type PoolOwnLoss @entity {
  """
  createdAt-eventIndex
  """
  id: ID!
  poolId: Bytes
  amount: BigInt
  createdAt: BigInt
}

type IncomingPayoutRequest @entity {
  """
  forwardedPayoutRequestId
  """
  id: ID!
  sourcePayoutRequestId: BigInt
  sourceChainId: BigInt
  poolId: Bytes
  amount: BigInt
  recipient: Bytes
  rootHash: String
  data: String
  status: Int
  createdAt: BigInt
}

type IncomingLoss @entity {
  """
  createdAt-chainId-poolId
  """
  id: ID!
  sourceChainId: BigInt
  sourcePoolId: Bytes
  poolId: Bytes
  amount: BigInt
  createdAt: BigInt
}

type AllowList @entity {
  id: ID!
  type: Int!
  owner: Bytes!
  descriptionCid: String
  accounts: [AllowListAccount!] @derivedFrom(field: "allowListId")
  createdAt: BigInt!
  createdBy: Bytes!
  updatedAt: BigInt!
}

type Bid @entity {
  """
  marketId-poolId
  """
  id: ID!
  marketId: String!
  poolId: Bytes!

  minPremiumRatePerSec: BigInt!
  maxPremiumRatePerSec: BigInt!
  minCoverBuffer: BigInt!
  maxCoverBuffer: BigInt!
  aggregatedPoolId: BigInt!
  bidOptimization: Int!

  maxCapacityLimit: BigInt!
  marketCapacityLimit: BigInt!
  capacityAllowance: BigInt!

  capacity: BigInt!
  aggregatedPool: AggregatedPool
  market: Market!
  pool: Pool!

  createdAt: BigInt!
  updatedAt: BigInt!
}

type AllowListAccount @entity {
  """
  allowListId-account
  """
  id: ID!
  allowListId: AllowList!
  account: Bytes!
  value: BigInt!
}
